
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> require(DoE.wrapper)
Loading required package: DoE.wrapper
Loading required package: FrF2
Loading required package: DoE.base
Loading required package: grid
Loading required package: conf.design

Attaching package: 'DoE.base'

The following objects are masked from 'package:stats':

    aov, lm

The following object is masked from 'package:graphics':

    plot.design

The following object is masked from 'package:base':

    lengths

Loading required package: rsm
> ## try out all available designs with and without factor names
> options(warn=-1)
> if(getRversion() >= "3.6.0") RNGkind(sample.kind="Rounding")
> options(warn=0)
> 
> set.seed(1234)
> 
> ## design with factor.names and constraint
>    plan <- Dopt.design(36,factor.names=list(eins=c(100,250),zwei=c(10,30),drei=c(-25,25)),
+                           nlevels=c(4,3,6), 
+                           formula=~quad(.), 
+                           constraint="!(eins>=200 & zwei==30 & drei==25)")
creating full factorial with 72 runs ...

>    summary(plan)
Call:
Dopt.design(36, factor.names = list(eins = c(100, 250), zwei = c(10, 
    30), drei = c(-25, 25)), nlevels = c(4, 3, 6), formula = ~quad(.), 
    constraint = "!(eins>=200 & zwei==30 & drei==25)")

Experimental design of type  Dopt 
36  runs

Factor settings (scale ends):
  eins zwei drei
1  100   10  -25
2  150   20  -15
3  200   30   -5
4  250         5
5             15
6             25

Optimality criteria:
          D        Dea          A          G 
7780.44617    0.50700   22.87199    0.59600 

The design itself:
   eins zwei drei
1   250   10  -15
2   200   10  -25
3   100   10   15
4   250   10   25
5   100   30   25
6   100   30  -25
7   250   20   25
8   100   20  -25
9   150   20    5
10  250   30   15
11  100   20   15
12  200   10   -5
13  250   30   -5
14  150   30   25
15  200   20   -5
16  100   10  -25
17  200   10   25
18  200   30  -25
19  250   20  -25
20  200   30   15
21  100   20   -5
22  250   30  -25
23  150   10   25
24  100   10  -15
25  250   10    5
26  100   30  -15
27  250   10  -25
28  150   30  -25
29  250   30  -15
30  250   30    5
31  200   20   25
32  100   10   25
33  100   30    5
34  100   20   25
35  250   10   15
36  200   20  -25
class=design, type= Dopt 
>    design.info(plan)
$type
[1] "Dopt"

$nruns
[1] 36

$nfactors
[1] 3

$factor.names
$factor.names$eins
[1] 100 150 200 250

$factor.names$zwei
[1] 10 20 30

$factor.names$drei
[1] -25 -15  -5   5  15  25


$nlevels
[1] 4 3 6

$replications
[1] 1

$repeat.only
[1] FALSE

$randomize
[1] TRUE

$seed
NULL

$creator
Dopt.design(36, factor.names = list(eins = c(100, 250), zwei = c(10, 
    30), drei = c(-25, 25)), nlevels = c(4, 3, 6), formula = ~quad(.), 
    constraint = "!(eins>=200 & zwei==30 & drei==25)")

$quantitative
eins zwei drei 
TRUE TRUE TRUE 

$digits
NULL

$constraint
[1] "!(eins>=200 & zwei==30 & drei==25)"

$formula
~(eins + zwei + drei)^2 + I(eins^2) + I(zwei^2) + I(drei^2)

$optimality.criteria
$optimality.criteria$D
[1] 7780.446

$optimality.criteria$Dea
[1] 0.507

$optimality.criteria$A
[1] 22.87199

$optimality.criteria$G
[1] 0.596


$response.names
NULL

>    run.order(plan)
   run.no.in.std.order run.no run.no.std.rp
1                   16      1            16
2                    3      2             3
3                   49      3            49
4                   64      4            64
5                   69      5            69
6                    9      6             9
7                   68      7            68
8                    5      8             5
9                   42      9            42
10                  60     10            60
11                  53     11            53
12                  27     12            27
13                  36     13            36
14                  70     14            70
15                  31     15            31
16                   1     16             1
17                  63     17            63
18                  11     18            11
19                   8     19             8
20                  59     20            59
21                  29     21            29
22                  12     22            12
23                  62     23            62
24                  13     24            13
25                  40     25            40
26                  21     26            21
27                   4     27             4
28                  10     28            10
29                  24     29            24
30                  48     30            48
31                  67     31            67
32                  61     32            61
33                  45     33            45
34                  65     34            65
35                  52     35            52
36                   7     36             7
>    cor(plan)
            eins        zwei        drei
eins  1.00000000 -0.02600157 -0.06079573
zwei -0.02600157  1.00000000 -0.11562310
drei -0.06079573 -0.11562310  1.00000000
>    y <- rnorm(36)
>    r.plan <- add.response(plan, y)
>    summary(r.plan)
Call:
Dopt.design(36, factor.names = list(eins = c(100, 250), zwei = c(10, 
    30), drei = c(-25, 25)), nlevels = c(4, 3, 6), formula = ~quad(.), 
    constraint = "!(eins>=200 & zwei==30 & drei==25)")

Experimental design of type  Dopt 
36  runs

Factor settings (scale ends):
  eins zwei drei
1  100   10  -25
2  150   20  -15
3  200   30   -5
4  250         5
5             15
6             25

Optimality criteria:
          D        Dea          A          G 
7780.44617    0.50700   22.87199    0.59600 

Responses:
[1] y

The design itself:
   eins zwei drei            y
1   250   10  -15 -0.820426525
2   200   10  -25 -1.238082813
3   100   10   15 -1.199567511
4   250   10   25 -0.865900980
5   100   30   25  1.616788027
6   100   30  -25  0.643012311
7   250   20   25  0.392345274
8   100   20  -25  1.426797472
9   150   20    5  0.091608959
10  250   30   15 -0.341404275
11  100   20   15 -0.210525633
12  200   10   -5  0.758068019
13  250   30   -5 -0.882701460
14  150   30   25 -1.324412177
15  200   20   -5 -0.212359730
16  100   10  -25  0.869828026
17  200   10   25 -0.786104100
18  200   30  -25 -0.209784262
19  250   20  -25  0.755206041
20  200   30   15 -0.222640541
21  100   20   -5  1.326843454
22  250   30  -25 -1.252229834
23  150   10   25 -0.841859617
24  100   10  -15 -0.186975108
25  250   10    5 -0.595959018
26  100   30  -15  0.785419244
27  250   10  -25  1.478207404
28  150   30  -25  0.409814627
29  250   30  -15  1.517191078
30  250   30    5  0.227777659
31  200   20   25  1.187114819
32  100   10   25  0.004490806
33  100   30    5  0.138982613
34  100   20   25  0.333016971
35  250   10   15 -1.830209682
36  200   20  -25  0.758649272
class=design, type= Dopt 
>    summary(lm(r.plan))
Number of observations used: 36 
Formula:
y ~ (eins + zwei + drei)^2 + I(eins^2) + I(zwei^2) + I(drei^2)

Call:
lm.default(formula = fo, data = model.frame(fo, data = formula))

Residuals:
    Min      1Q  Median      3Q     Max 
-1.3672 -0.3520 -0.0098  0.2658  1.7043 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)  
(Intercept) -1.172e+00  2.130e+00  -0.550   0.5869  
eins        -2.254e-02  2.177e-02  -1.035   0.3101  
zwei         3.324e-01  1.390e-01   2.391   0.0243 *
drei        -3.693e-02  2.893e-02  -1.277   0.2130  
I(eins^2)    6.384e-05  6.102e-05   1.046   0.3051  
I(zwei^2)   -7.113e-03  3.204e-03  -2.220   0.0353 *
I(drei^2)    4.470e-04  5.714e-04   0.782   0.4411  
eins:zwei   -1.383e-04  2.649e-04  -0.522   0.6059  
eins:drei    3.001e-05  1.186e-04   0.253   0.8023  
zwei:drei    9.900e-04  8.704e-04   1.137   0.2657  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.8469 on 26 degrees of freedom
Multiple R-squared:  0.3806,	Adjusted R-squared:  0.1662 
F-statistic: 1.775 on 9 and 26 DF,  p-value: 0.1219

>    #plan2 <- Dopt.augment(r.plan, m=10)
>    #cor(plan2)
> 
> ## design with candidates and constraint
> candplan <- expand.grid(eins=c(100,150,200,250),zwei=c(10,20,30),drei=c(-25,-15,-5,5,15,25))
> planc <- Dopt.design(36, candplan, formula=~quad(.), 
+                           constraint="!(eins>=200 & zwei==30 & drei==25)", center=TRUE)
> planc
   eins zwei drei
1   250   20  -25
2   250   10   25
3   250   10  -25
4   100   10   25
5   100   20   -5
6   150   30  -25
7   250   30  -25
8   100   20   25
9   150   20  -25
10  250   20  -15
11  200   20   -5
12  200   10   25
13  100   10   -5
14  100   20  -25
15  200   20    5
16  200   10   -5
17  200   10  -25
18  100   30  -25
19  250   30   15
20  100   10   15
21  100   30   -5
22  150   30   25
23  150   10  -25
24  250   30    5
25  250   30  -15
26  200   30   15
27  100   10    5
28  250   10   -5
29  100   10  -25
30  200   30  -25
31  100   30    5
32  100   30   15
33  150   20   25
34  200   10   15
35  250   20   25
36  100   30   25
class=design, type= Dopt 
> cor(desnum(planc)[,-1])
                  eins         zwei        drei    I(eins^2)    I(zwei^2)
eins       1.000000000  0.000000000 -0.10215929  0.993789504 -0.005474475
zwei       0.000000000  1.000000000 -0.01678258  0.007628555  0.991430862
drei      -0.102159291 -0.016782577  1.00000000 -0.099398586 -0.012941261
I(eins^2)  0.993789504  0.007628555 -0.09939859  1.000000000  0.002783672
I(zwei^2) -0.005474475  0.991430862 -0.01294126  0.002783672  1.000000000
I(drei^2)  0.005621394 -0.024472067 -0.11627496 -0.008359407 -0.031675863
eins:zwei  0.633955219  0.726058768 -0.09240395  0.638354760  0.716428750
eins:drei -0.113903878 -0.037117525  0.94393015 -0.115318511 -0.034211998
zwei:drei -0.119400932 -0.031148926  0.92084040 -0.118350250 -0.027986819
             I(drei^2)   eins:zwei   eins:drei   zwei:drei
eins       0.005621394  0.63395522 -0.11390388 -0.11940093
zwei      -0.024472067  0.72605877 -0.03711753 -0.03114893
drei      -0.116274964 -0.09240395  0.94393015  0.92084040
I(eins^2) -0.008359407  0.63835476 -0.11531851 -0.11835025
I(zwei^2) -0.031675863  0.71642875 -0.03421200 -0.02798682
I(drei^2)  1.000000000 -0.03849768 -0.11660848 -0.13625730
eins:zwei -0.038497678  1.00000000 -0.11769354 -0.12445198
eins:drei -0.116608479 -0.11769354  1.00000000  0.86036288
zwei:drei -0.136257304 -0.12445198  0.86036288  1.00000000
> 
> ## design with blocking without wholeBlockData (i.e. blocked, not splitplot)
> planc <- Dopt.design(36, candplan, formula=~quad(.), 
+                           constraint="!(eins>=200 & zwei==30 & drei==25)", center=TRUE, 
+                           blocks=3)
> summary(planc)
Call:
Dopt.design(36, candplan, formula = ~quad(.), constraint = "!(eins>=200 & zwei==30 & drei==25)", 
    center = TRUE, blocks = 3)

Experimental design of type  Dopt.blocked 
36  runs
blocked design with  3  blocks of size  12 12 12 

Factor settings (scale ends):
  eins zwei drei
1  100   10  -25
2  250   30   25

Optimality criteria:
        D 
22211.85 

The design itself:
   run.no run.no.std.rp Blocks eins zwei drei
1       1        10.1.5      1  150   30  -25
2       2        12.1.7      1  250   30  -25
3       3         4.1.4      1  250   10  -25
4       4        60.1.8      1  250   30   15
5       5        61.1.9      1  100   10   25
6       6       69.1.12      1  100   30   25
7       7         2.1.2      1  150   10  -25
8       8       64.1.11      1  250   10   25
9       9         3.1.3      1  200   10  -25
10     10        11.1.6      1  200   30  -25
11     11       63.1.10      1  200   10   25
12     12         1.1.1      1  100   10  -25
   run.no run.no.std.rp Blocks eins zwei drei
13     13        57.2.8      2  100   30   15
14     14        28.2.5      2  250   10   -5
15     15        34.2.6      2  150   30   -5
16     16       68.2.12      2  250   20   25
17     17        16.2.3      2  250   10  -15
18     18         9.2.2      2  100   30  -25
19     19        24.2.4      2  250   30  -15
20     20         5.2.1      2  100   20  -25
21     21        36.2.7      2  250   30   -5
22     22       65.2.10      2  100   20   25
23     23       67.2.11      2  200   20   25
24     24        59.2.9      2  200   30   15
   run.no run.no.std.rp Blocks eins zwei drei
25     25         8.3.3      3  250   20  -25
26     26         6.3.1      3  150   20  -25
27     27       52.3.10      3  250   10   15
28     28        48.3.8      3  250   30    5
29     29        33.3.7      3  100   30   -5
30     30        13.3.4      3  100   10  -15
31     31        20.3.5      3  250   20  -15
32     32       70.3.12      3  150   30   25
33     33       62.3.11      3  150   10   25
34     34        21.3.6      3  100   30  -15
35     35        49.3.9      3  100   10   15
36     36         7.3.2      3  200   20  -25
class=design, type= Dopt.blocked 
NOTE: columns run.no and run.no.std.rp  are annotation, 
 not part of the data frame
> cor(desnum(planc)[,-1])
              Blocks2     Blocks3        eins        zwei        drei
Blocks2    1.00000000 -0.50000000  0.04693233  0.22316092  0.11442591
Blocks3   -0.50000000  1.00000000 -0.09386465 -0.04463218 -0.02860648
eins       0.04693233 -0.09386465  1.00000000 -0.05446200 -0.04564733
zwei       0.22316092 -0.04463218 -0.05446200  1.00000000 -0.05362432
drei       0.11442591 -0.02860648 -0.04564733 -0.05362432  1.00000000
I(eins^2)  0.05970092 -0.09286809  0.99436421 -0.05625229 -0.04212655
I(zwei^2)  0.19867985 -0.06622662 -0.06216338  0.99316177 -0.04546825
I(drei^2) -0.26411128 -0.21459042 -0.15959022 -0.24017772 -0.04816500
eins:zwei  0.16335962 -0.08167981  0.58764127  0.72868078 -0.07834388
eins:drei  0.13402486 -0.03383152 -0.07829035 -0.06051513  0.94539227
zwei:drei  0.12677083 -0.04980283 -0.05439680 -0.08567918  0.91697807
            I(eins^2)   I(zwei^2)   I(drei^2)   eins:zwei   eins:drei
Blocks2    0.05970092  0.19867985 -0.26411128  0.16335962  0.13402486
Blocks3   -0.09286809 -0.06622662 -0.21459042 -0.08167981 -0.03383152
eins       0.99436421 -0.06216338 -0.15959022  0.58764127 -0.07829035
zwei      -0.05625229  0.99316177 -0.24017772  0.72868078 -0.06051513
drei      -0.04212655 -0.04546825 -0.04816500 -0.07834388  0.94539227
I(eins^2)  1.00000000 -0.06326064 -0.19293516  0.58242220 -0.07676862
I(zwei^2) -0.06326064  1.00000000 -0.27548635  0.71785623 -0.05273903
I(drei^2) -0.19293516 -0.27548635  1.00000000 -0.28726401 -0.05408425
eins:zwei  0.58242220  0.71785623 -0.28726401  1.00000000 -0.10879604
eins:drei -0.07676862 -0.05273903 -0.05408425 -0.10879604  1.00000000
zwei:drei -0.05069583 -0.07915854 -0.07473573 -0.11398780  0.85635599
            zwei:drei
Blocks2    0.12677083
Blocks3   -0.04980283
eins      -0.05439680
zwei      -0.08567918
drei       0.91697807
I(eins^2) -0.05069583
I(zwei^2) -0.07915854
I(drei^2) -0.07473573
eins:zwei -0.11398780
eins:drei  0.85635599
zwei:drei  1.00000000
> 
> ## design with blocking without wholeBlockData (i.e. blocked, not splitplot)
> ## variable block sizes
> planc <- Dopt.design(36, candplan, formula=~quad(.), 
+                           constraint="!(eins>=200 & zwei==30 & drei==25)", center=TRUE, 
+                           blocks=c(6,6,12,12))
> summary(planc)
Call:
Dopt.design(36, candplan, formula = ~quad(.), constraint = "!(eins>=200 & zwei==30 & drei==25)", 
    center = TRUE, blocks = c(6, 6, 12, 12))

Experimental design of type  Dopt.blocked 
36  runs
blocked design with  4  blocks
Varying block sizes: 
[1]  6  6 12 12

Factor settings (scale ends):
  eins zwei drei
1  100   10  -25
2  250   30   25

Optimality criteria:
        D 
22381.01 

The design itself:
  run.no run.no.std.rp Blocks eins zwei drei
1      1        70.1.6      1  150   30   25
2      2         1.1.1      1  100   10  -25
3      3        33.1.2      1  100   30   -5
4      4        64.1.5      1  250   10   25
5      5        60.1.3      1  250   30   15
6      6        61.1.4      1  100   10   25
   run.no run.no.std.rp Blocks eins zwei drei
7       7        68.2.5      2  250   20   25
8       8         8.2.1      2  250   20  -25
9       9        12.2.2      2  250   30  -25
10     10        69.2.6      2  100   30   25
11     11        52.2.3      2  250   10   15
12     12        65.2.4      2  100   20   25
   run.no run.no.std.rp Blocks eins zwei drei
13     13        48.3.9      3  250   30    5
14     14         2.3.1      3  150   10  -25
15     15       63.3.11      3  200   10   25
16     16        10.3.5      3  150   30  -25
17     17         5.3.3      3  100   20  -25
18     18       49.3.10      3  100   10   15
19     19        25.3.8      3  100   10   -5
20     20        16.3.6      3  250   10  -15
21     21       67.3.12      3  200   20   25
22     22         9.3.4      3  100   30  -25
23     23        24.3.7      3  250   30  -15
24     24         4.3.2      3  250   10  -25
   run.no run.no.std.rp Blocks eins zwei drei
25     25        11.4.2      4  200   30  -25
26     26       56.4.10      4  250   20   15
27     27        37.4.7      4  100   10    5
28     28        28.4.5      4  250   10   -5
29     29        53.4.9      4  100   20   15
30     30        13.4.3      4  100   10  -15
31     31        21.4.4      4  100   30  -15
32     32       62.4.12      4  150   10   25
33     33        36.4.6      4  250   30   -5
34     34         3.4.1      4  200   10  -25
35     35       57.4.11      4  100   30   15
36     36        40.4.8      4  250   10    5
class=design, type= Dopt.blocked 
NOTE: columns run.no and run.no.std.rp  are annotation, 
 not part of the data frame
> cor(desnum(planc)[,-1])
              Blocks2     Blocks3     Blocks4        eins         zwei
Blocks2    1.00000000 -0.31622777 -0.31622777  0.16641006  0.125108648
Blocks3   -0.31622777  1.00000000 -0.50000000  0.00000000 -0.065938047
Blocks4   -0.31622777 -0.50000000  1.00000000 -0.04385290 -0.065938047
eins       0.16641006  0.00000000 -0.04385290  1.00000000 -0.011566299
zwei       0.12510865 -0.06593805 -0.06593805 -0.01156630  1.000000000
drei       0.14959152 -0.26609058 -0.02956562 -0.03111692 -0.085777966
I(eins^2)  0.18681300 -0.01664097 -0.04784280  0.99611555 -0.009326823
I(zwei^2)  0.08678934 -0.06037944 -0.06037944 -0.01444262  0.993877797
I(drei^2)  0.28806210  0.07852865 -0.39264325 -0.07438412 -0.010356052
eins:zwei  0.17470078 -0.03277260 -0.08895420  0.60854033  0.734109378
eins:drei  0.05627721 -0.21841058 -0.04449104 -0.02979803 -0.101344360
zwei:drei  0.13241834 -0.27053657 -0.03058239 -0.05075649 -0.126266639
                 drei    I(eins^2)   I(zwei^2)   I(drei^2)   eins:zwei
Blocks2    0.14959152  0.186812999  0.08678934  0.28806210  0.17470078
Blocks3   -0.26609058 -0.016640974 -0.06037944  0.07852865 -0.03277260
Blocks4   -0.02956562 -0.047842800 -0.06037944 -0.39264325 -0.08895420
eins      -0.03111692  0.996115547 -0.01444262 -0.07438412  0.60854033
zwei      -0.08577797 -0.009326823  0.99387780 -0.01035605  0.73410938
drei       1.00000000 -0.030996045 -0.10710933 -0.05014976 -0.09800158
I(eins^2) -0.03099604  1.000000000 -0.01310772 -0.11695799  0.60835796
I(zwei^2) -0.10710933 -0.013107716  1.00000000 -0.03500101  0.72752695
I(drei^2) -0.05014976 -0.116957993 -0.03500101  1.00000000 -0.08220775
eins:zwei -0.09800158  0.608357958  0.72752695 -0.08220775  1.00000000
eins:drei  0.94039519 -0.030220733 -0.12370504 -0.06530270 -0.11490484
zwei:drei  0.91225558 -0.048758530 -0.14857607 -0.07323015 -0.14699146
            eins:drei   zwei:drei
Blocks2    0.05627721  0.13241834
Blocks3   -0.21841058 -0.27053657
Blocks4   -0.04449104 -0.03058239
eins      -0.02979803 -0.05075649
zwei      -0.10134436 -0.12626664
drei       0.94039519  0.91225558
I(eins^2) -0.03022073 -0.04875853
I(zwei^2) -0.12370504 -0.14857607
I(drei^2) -0.06530270 -0.07323015
eins:zwei -0.11490484 -0.14699146
eins:drei  1.00000000  0.84565368
zwei:drei  0.84565368  1.00000000
> 
> ## design with blocking with wholeBlockData (splitplot)
> within<-expand.grid(A=c(-1,0,1),B=c(-1,0,1),C=c(-1,0,1))
> whole<-expand.grid(D=factor(1:3),E=factor(1:3))
> 
> planc <- Dopt.design(54, within, formula=~D+E*(quad(A,B,C)), 
+                           center=TRUE, 
+                           blocks=rep(6,9), wholeBlockData=whole)
> summary(planc)
Call:
Dopt.design(54, within, formula = ~D + E * (quad(A, B, C)), center = TRUE, 
    blocks = rep(6, 9), wholeBlockData = whole)

Experimental design of type  Dopt.splitplot 
54  runs

Factor settings:
  D E  A  B  C
1 1 1 -1 -1 -1
2 2 2  1  1  1
3 3 3         

Optimality criteria:
         D 
0.1263164 

split-plot design:  9  whole plots
   first  2  factors are whole plot factors
> 
> whole <- data.frame(semester=1:3,reader=c(1,2,1))
> planc <- Dopt.design(36, candplan, formula=~semester+reader+(eins+zwei+drei)^2,center=TRUE, 
+                           constraint="!(eins>=200 & zwei==30 & drei==25)",
+                           blocks=c(12,12,12), wholeBlockData=whole)
> summary(planc)
Call:
Dopt.design(36, candplan, formula = ~semester + reader + (eins + 
    zwei + drei)^2, center = TRUE, constraint = "!(eins>=200 & zwei==30 & drei==25)", 
    blocks = c(12, 12, 12), wholeBlockData = whole)

Experimental design of type  Dopt.splitplot 
36  runs

Factor settings (scale ends):
  semester reader eins zwei drei
1        1      1  100   10  -25
2        2      2  250   30   25
3        3                      

Optimality criteria:
        D 
11560.03 

split-plot design:  3  whole plots
   first  2  factors are whole plot factors

The design itself:
   run.no run.no.std.rp Blocks semester reader eins zwei drei
1       1        40.1.7      1        1      1  250   10    5
2       2       62.1.10      1        1      1  150   10   25
3       3       63.1.11      1        1      1  200   10   25
4       4        21.1.5      1        1      1  100   30  -15
5       5        59.1.9      1        1      1  200   30   15
6       6        16.1.4      1        1      1  250   10  -15
7       7        13.1.3      1        1      1  100   10  -15
8       8        12.1.2      1        1      1  250   30  -25
9       9        24.1.6      1        1      1  250   30  -15
10     10       70.1.12      1        1      1  150   30   25
11     11        45.1.8      1        1      1  100   30    5
12     12         1.1.1      1        1      1  100   10  -25
   run.no run.no.std.rp Blocks semester reader eins zwei drei
13     13         9.2.3      2        2      2  100   30  -25
14     14       65.2.11      2        2      2  100   20   25
15     15         2.2.1      2        2      2  150   10  -25
16     16         8.2.2      2        2      2  250   20  -25
17     17        52.2.8      2        2      2  250   10   15
18     18        28.2.6      2        2      2  250   10   -5
19     19       68.2.12      2        2      2  250   20   25
20     20        57.2.9      2        2      2  100   30   15
21     21       60.2.10      2        2      2  250   30   15
22     22        11.2.4      2        2      2  200   30  -25
23     23        25.2.5      2        2      2  100   10   -5
24     24        49.2.7      2        2      2  100   10   15
   run.no run.no.std.rp Blocks semester reader eins zwei drei
25     25       69.3.12      3        3      1  100   30   25
26     26        36.3.6      3        3      1  250   30   -5
27     27        10.3.4      3        3      1  150   30  -25
28     28        48.3.8      3        3      1  250   30    5
29     29         4.3.2      3        3      1  250   10  -25
30     30        37.3.7      3        3      1  100   10    5
31     31        56.3.9      3        3      1  250   20   15
32     32        33.3.5      3        3      1  100   30   -5
33     33         3.3.1      3        3      1  200   10  -25
34     34       61.3.10      3        3      1  100   10   25
35     35         5.3.3      3        3      1  100   20  -25
36     36       64.3.11      3        3      1  250   10   25
class=design, type= Dopt.splitplot 
NOTE: columns run.no and run.no.std.rp  are annotation, 
 not part of the data frame
> cor(desnum(planc)[,-1])
              Blocks2      Blocks3     semester      reader        eins
Blocks2    1.00000000 -0.500000000  0.000000000  1.00000000  0.00000000
Blocks3   -0.50000000  1.000000000  0.866025404 -0.50000000  0.00000000
semester   0.00000000  0.866025404  1.000000000  0.00000000  0.00000000
reader     1.00000000 -0.500000000  0.000000000  1.00000000  0.00000000
eins       0.00000000  0.000000000  0.000000000  0.00000000  1.00000000
zwei      -0.04235235  0.021176177  0.000000000 -0.04235235 -0.03343093
drei       0.02014557 -0.010072787  0.000000000  0.02014557 -0.02120260
eins:zwei -0.03230028  0.009228651 -0.007992246 -0.03230028  0.59491357
eins:drei  0.02475200 -0.016501336 -0.004763525  0.02475200 -0.02749799
zwei:drei  0.01425448 -0.007127238  0.000000000  0.01425448 -0.04125661
                 zwei        drei    eins:zwei    eins:drei    zwei:drei
Blocks2   -0.04235235  0.02014557 -0.032300277  0.024752003  0.014254476
Blocks3    0.02117618 -0.01007279  0.009228651 -0.016501336 -0.007127238
semester   0.00000000  0.00000000 -0.007992246 -0.004763525  0.000000000
reader    -0.04235235  0.02014557 -0.032300277  0.024752003  0.014254476
eins      -0.03343093 -0.02120260  0.594913565 -0.027497995 -0.041256608
zwei       1.00000000 -0.05460560  0.730703592 -0.070236478 -0.077576815
drei      -0.05460560  1.00000000 -0.069532759  0.939444014  0.907440140
eins:zwei  0.73070359 -0.06953276  1.000000000 -0.090228900 -0.105831637
eins:drei -0.07023648  0.93944401 -0.090228900  1.000000000  0.841021572
zwei:drei -0.07757682  0.90744014 -0.105831637  0.841021572  1.000000000
> r.planc <- add.response(planc, rnorm(36))
> summary(lm(r.planc))
Number of observations used: 36 
Formula:
rnorm.36. ~ semester + reader + (eins + zwei + drei)^2

Call:
lm.default(formula = fo, data = model.frame(fo, data = formula))

Residuals:
    Min      1Q  Median      3Q     Max 
-2.1736 -0.8762 -0.1620  0.6838  2.4049 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)
(Intercept)  5.266e-01  1.678e+00   0.314    0.756
semester    -4.148e-01  2.705e-01  -1.534    0.137
reader      -2.478e-01  4.688e-01  -0.529    0.601
eins         1.041e-03  7.857e-03   0.133    0.896
zwei         2.557e-02  6.697e-02   0.382    0.706
drei        -1.607e-02  4.295e-02  -0.374    0.711
eins:zwei   -9.365e-06  3.643e-04  -0.026    0.980
eins:drei   -8.760e-05  1.818e-04  -0.482    0.634
zwei:drei    1.244e-03  1.284e-03   0.969    0.341

Residual standard error: 1.324 on 27 degrees of freedom
Multiple R-squared:  0.1669,	Adjusted R-squared:  -0.07995 
F-statistic: 0.6761 on 8 and 27 DF,  p-value: 0.7081

WARNING: This is a split plot design, whole plot effects may have larger variance!
         p-values for whole plot effects may be misleadingly low!
The whole plot effects are:
[1] semester reader  
> 
> proc.time()
   user  system elapsed 
   0.76    0.21    0.96 
